✅ 2. Asynchronous Programming (C#)

Highly important in modern scalable apps:

1. async/await, Task, Task<T>

2. Parallelism vs Concurrency

3. Task.WhenAll, Task.WhenAny

4. Deadlocks, ConfigureAwait(false)

5. Fire-and-forget patterns (and risks)

6. Thread safety, lock, Interlocked, ConcurrentDictionary


🔹 async/await, Task, Task<T>

async/await: Allows non-blocking, readable asynchronous code.

Task: Represents a unit of work — completes in the future.

Task<T>: Task that returns a value (async Task<int> Foo()).

📌 Example:

public async Task<string> GetDataAsync()
{
    var result = await httpClient.GetStringAsync("https://api.com/data");
    return result;
}


🔹 Parallelism vs Concurrency

| Aspect   | Concurrency                                | Parallelism                      |
| -------- | ------------------------------------------ | -------------------------------- |
| Goal     | Do **many tasks**, not necessarily at once | Do **many tasks at once**        |
| Example  | Async I/O calls                            | CPU-bound loops (`Parallel.For`) |
| Use Case | Web APIs, DB access                        | Image processing, simulations    |


🔹 Task.WhenAll vs Task.WhenAny

Task.WhenAll(...): Waits for all tasks to complete.

Task.WhenAny(...): Returns when any one completes — useful for race or timeout scenarios.

await Task.WhenAll(task1, task2); // waits for all
var firstFinished = await Task.WhenAny(task1, task2); // gets first

⚠️ WhenAll aggregates all exceptions.

🔹 Deadlocks & ConfigureAwait(false)

Deadlocks occur when a thread awaits a result on the same synchronization context it's blocking.

Fix: Never block async code with .Result or .Wait() in UI/ASP.NET contexts.

Use ConfigureAwait(false) in libraries:


await SomeAsyncMethod().ConfigureAwait(false);

🔹 Fire-and-Forget Patterns (⚠️ Risky)
Use with caution: Exceptions may go unobserved.

Best used with background services or logging:

_ = Task.Run(() => LogAsync());

✅ Prefer using a background queue or monitoring.

🔹 Thread Safety
✅ Techniques:
lock: Prevents concurrent access.

Interlocked: Atomic operations (add/increment).

ConcurrentDictionary: Thread-safe dictionary.

🧠 Code Examples:

🔸 lock

lock (_syncObj)
{
    sharedList.Add(item);
}
🔸 Interlocked
Interlocked.Increment(ref counter);

🔸 ConcurrentDictionary

var dict = new ConcurrentDictionary<string, int>();
dict.TryAdd("key", 1);



✅ Summary Table

| Topic                   | Why Important                                       |
| ----------------------- | --------------------------------------------------- |
| `async`/`await`         | Clean, scalable async code                          |
| `Task`, `Task<T>`       | Represents async work                               |
| `WhenAll/WhenAny`       | Coordination of multiple tasks                      |
| `ConfigureAwait(false)` | Prevents deadlocks in non-UI contexts               |
| Fire-and-forget         | For background ops — but handle exceptions properly |
| `lock`, `Interlocked`   | Manage access to shared state                       |
| `ConcurrentDictionary`  | High-performance thread-safe dictionary             |
