
📌 💰 💵 💸 💳 📉 📈 💹 💲 🧾 📄 📝 🖊 🗂 🧠 ⚠ ❗ ✅ ❌ 📌 🔍 👨‍💼 👔 🧑 🧑 💼 📝🧳 🏡 🧠 🎯 🛑 ✅ 💡

🔍 JavaScript Scope and Hoisting Explained

🔸 1. Scope
Scope determines where variables, functions, and objects are accessible in your code.

🧭 Types of Scope

| Type               | Description                                                                       |
| ------------------ | --------------------------------------------------------------------------------- |
| **Global Scope**   | Declared outside any function/block — accessible everywhere.                      |
| **Function Scope** | Variables declared with `var` inside a function are visible only within it.       |
| **Block Scope**    | Variables declared with `let` or `const` are visible only within that block `{}`. |


🔍 Example

function testScope() {
  var a = 1;      // function-scoped
  let b = 2;      // block-scoped
  const c = 3;    // block-scoped

  if (true) {
    var a = 10;   // same scope as above, value overwritten
    let b = 20;   // new block scope
    const c = 30; // new block scope
    console.log(a, b, c); // 10 20 30
  }

  console.log(a); // 10
  console.log(b); // 2
  console.log(c); // 3
}


🔸 2. Hoisting

Hoisting is JavaScript's behavior of moving declarations to the top of their scope before code execution.

⚠️ But only the declarations are hoisted — not the initializations.

📦 Hoisting Behavior

| Keyword    | Hoisted | Initialized  | Scope          |
| ---------- | ------- | ------------ | -------------- |
| `var`      | ✅ Yes   | ❌ No         | Function scope |
| `let`      | ✅ Yes   | ❌ No (TDZ\*) | Block scope    |
| `const`    | ✅ Yes   | ❌ No (TDZ\*) | Block scope    |
| `function` | ✅ Yes   | ✅ Yes        | Function scope |

🔸 TDZ = Temporal Dead Zone: You cannot access the variable before its declaration.


🧪 Hoisting Example

console.log(a); // undefined
var a = 5;

console.log(b); // ReferenceError: Cannot access 'b' before initialization
let b = 10;

var a;


🔍 Behind the scenes:

var a;
console.log(a); // undefined
a = 5;

let b;
console.log(b); // ❌ Error
b = 10;



🔍 Function Hoisting Example

sayHello(); // ✅ Works
function sayHello() {
  console.log("Hi!");
}

But not with function expressions:

sayHi(); // ❌ TypeError: sayHi is not a function
var sayHi = function() {
  console.log("Hello");
};

✅ Summary

| Concept  | Key Takeaway                                                                                       |
| -------- | -------------------------------------------------------------------------------------------------- |
| Scope    | Controls variable access — `var` is function-scoped, `let` and `const` are block-scoped.           |
| Hoisting | Declarations are moved to the top — only `var` and `function` are safely usable before definition. |




🔹 1. Function Declarations — ✅ Fully Hoisted

✅ Hoisted with both declaration and definition.

greet(); // ✅ Works, prints: Hello!

function greet() {
  console.log("Hello!");
}

Behind the scenes, JavaScript interprets it as:

function greet() {
  console.log("Hello!");
}
greet();

🔑 Use Case: You can safely call a function before it's defined.


🔹 2. Function Expressions — ❌ Not Fully Hoisted

❌ Only the variable (if declared with var) is hoisted — not the function itself.


sayHi(); // ❌ TypeError: sayHi is not a function

var sayHi = function() {
  console.log("Hi!");
};

Behind the scenes:

var sayHi; // hoisted
sayHi();   // ❌ Error, still undefined
sayHi = function() {
  console.log("Hi!");
};

🔑 Key Insight: Function expressions behave like any other variable assignment.



🔹 4. Function Inside Block Scope

Function declarations in block scopes (if, while, etc.) are not always hoisted reliably, especially in non-strict mode or across browsers.

if (true) {
  function blockFn() {
    console.log("Inside block");
  }
}

blockFn(); // ❌ Might throw ReferenceError in strict mode

✅ Best Practice: Use function expressions inside blocks to avoid ambiguity.



✅ Summary Table: Hoisting in Functions

| Function Type                   | Hoisted?                 | Can Call Before Definition?   |
| ------------------------------- | -----------------------  | ---------------------------   |
| `function declaration`          | ✅ Yes                   | ✅ Yes                       |
| `var function expression`       | 🟡 Partially (var only)    ❌ No                        |
| `let/const function expression` | ❌ No                    | ❌ No                        |
| `arrow function`                | ❌ No                    | ❌ No                        |
| Block-scoped functions          | 🟠 Browser-dependent     | ❌ Unsafe                    |





-----------------------------------------------------------------------------------------------------------------------------------------------------

Here’s a clear, side-by-side example set that demonstrates hoisting behavior for each type of function in JavaScript, including console.log() outputs and expected results.


🟢 1. Function Declaration

			greet(); // ✅ Works: "Hello from declaration!"

			function greet() {
			console.log("Hello from declaration!");
			}
			
		✅ Fully hoisted (both name and definition)


🟡 2. var Function Expression

		console.log(sayHi); // undefined
		sayHi(); // ❌ TypeError: sayHi is not a function
		
		var sayHi = function() {
		console.log("Hi from var function expression!");
		};

		🔸 Only the variable sayHi is hoisted, not the function value.


🔴 3. let / const Function Expression

	console.log(sayHello); // ❌ ReferenceError: Cannot access 'sayHello' before initialization
		const sayHello = function() {
		console.log("Hello from const function expression!");
	};

	console.log(sayYo); // ❌ ReferenceError
		let sayYo = function() {
		console.log("Yo from let function expression!");
	};
	
	❌ Not hoisted (TDZ: Temporal Dead Zone applies)
	

🔻 4. Arrow Function (with var)

	console.log(arrow); // undefined
	arrow(); // ❌ TypeError: arrow is not a function

	var arrow = () => {
		console.log("Arrow function here!");
	};

	🔸 Same as var function expression — only the variable is hoisted.


🟠 5. Block-Scoped Function Declaration

	if (true) {
		function testBlock() {
		console.log("Inside block-scoped function");
	}	
}

testBlock(); // ❌ ReferenceError in strict mode, might work in sloppy mode


⚠️ Behavior is browser- and mode-dependent (ES6+ strict mode disallows block-level hoisting of functions).

To make it safe:

if (true) {
  const testSafe = function () {
    console.log("Safe block-level function");
  };
}

testSafe(); // ❌ ReferenceError: testSafe is not defined


✅ Summary

| Function Type                     | Can Call Before Declaration? | Hoisted?     | Notes                         |
| --------------------------------- | ---------------------------- | ------------ | ----------------------------- |
| Function Declaration              | ✅ Yes                        | ✅ Yes        | Safe to call early            |
| `var` Function Expression         | ❌ No                         | 🟡 Partially | Only name hoisted (undefined) |
| `let` / `const` Function Expr.    | ❌ No                         | ❌ No         | TDZ applies                   |
| Arrow Function (var/let/const)    | ❌ No                         | ❌ No         | Same as function expressions  |
| Block-Scoped Function Declaration | ❌ No                         | 🟠 Partial   | Strict mode = ReferenceError  |





===============================================================================================================================

CHECK THIS

1.  This will work — and here’s why:
 
 
 if (true) {
  var blockFn = function blockFn() { 
    console.log("Inside block");
  }
}

blockFn(); // ✅ Outputs: Inside block



 
2.  will NOT actually work as expected 


blockFn(); // ✅ Outputs: Inside block

if (true) {
  var blockFn = function blockFn() { 
    console.log("Inside block");
  }
}

🚫 Contrast: Using let or const instead

if (true) {
  let blockFn = function blockFn() {
    console.log("Inside block");
  }
}

blockFn(); // ❌ ReferenceError


