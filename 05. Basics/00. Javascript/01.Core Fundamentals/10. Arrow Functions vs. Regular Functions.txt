
üìå üí∞ üíµ üí∏ üí≥ üìâ üìà üíπ üí≤ üßæ üìÑ üìù üñä üóÇ üß† ‚ö† ‚ùó ‚úÖ ‚ùå üìå üîç üë®‚Äçüíº üëî üßë üßë üíº üìùüß≥ üè° üß† üéØ üõë ‚úÖ üí°


Arrow functions vs Regular functions

Arrow functions and regular functions in JavaScript differ in several important ways, especially in terms of syntax, behavior of this, and how they handle arguments and constructors.

Here‚Äôs a breakdown:
------------------

üîπ 1. Syntax

 üí° Arrow Function:

		const add = (a, b) => a + b;


	const add = (a, b) => a + b;

 üí° Regular Function:

		function add(a, b) {
			return a + b;
		}


üîπ 2. this Binding

| Feature        | Regular Function                                       | Arrow Function                                      |
| -------------- | ------------------------------------------------------ | --------------------------------------------------- |
| `this` context | Dynamic (`this` depends on how the function is called) | Lexical (`this` is inherited from the parent scope) |
| Use case       | Good for object methods                                | Good for callbacks (e.g. `map`, `setTimeout`)       |


 üí° Example:

	const obj = {
		value: 10,
		regularFn() {
			console.log(this.value); // ‚úÖ 10
		},
		arrowFn: () => {
			console.log(this.value); // ‚ùå undefined (lexical `this`, not bound to obj)
		}
	};

	obj.regularFn();
	obj.arrowFn();


üîπ 3. arguments Object 

| Feature         | Regular Function | Arrow Function |
| --------------- | ---------------- | -------------- |
| Has `arguments` | ‚úÖ Yes           | ‚ùå No          |


 üí° Example:
	
	function regular() {
		console.log(arguments); // ‚úÖ Works
	}

	const arrow = () => {
		console.log(arguments); // ‚ùå ReferenceError
	};


üîπ 4. Constructor Usage

| Feature                | Regular Function | Arrow Function |
| ---------------------- | ---------------- | -------------- |
| Can be used with `new` | ‚úÖ Yes            | ‚ùå No           |


 üí° Example:

    function Person(name) {
      this.name = name;
    }
    const p = new Person("Alice"); // ‚úÖ works
    
    const PersonArrow = (name) => {
      this.name = name;
    };
    const p2 = new PersonArrow("Bob"); // ‚ùå TypeError


üîπ 5. Use Cases

| Use Case                               | Use...           |
| -------------------------------------- | ---------------- |
| Object methods                         | Regular function |
| Event handlers in objects              | Regular function |
| Callbacks (e.g., `.map`, `.filter`)    | Arrow function   |
| Inline functions with lexical `this`   | Arrow function   |
| Functions needing `arguments` or `new` | Regular function |



‚úÖ Summary

| Feature             | Regular Function      | Arrow Function             |
| ------------------- | --------------------- | -------------------------- |
| `this` binding      | Dynamic               | Lexical (from parent)      |
| `arguments`         | Available             | Not available              |
| Used as constructor | Yes (`new`)           | No                         |
| Syntax              | Verbose               | Concise                    |
| Best for            | Methods, constructors | Callbacks, short functions |
