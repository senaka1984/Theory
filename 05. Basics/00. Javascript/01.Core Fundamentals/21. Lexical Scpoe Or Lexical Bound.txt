

ðŸ”¹ What is Lexical Scope?

	Lexical scope (also called static scope) means:

	The scope of variables is determined by the structure of your code, at write-time, not run-time.

ðŸ§ª Example:

function outer() {
  let msg = "Hello";

  function inner() {
    console.log(msg); // <-- has access to `msg`
  }

  return inner;
}

const fn = outer();
fn(); // ðŸ‘‰ logs: Hello
	inner has lexical scope over msg, because it was defined inside outer.

	The JavaScript engine can tell at compile time what variables inner can access â€” thatâ€™s lexical scope.


ðŸ”¸ What is Lexically Bound?

	When we say something is lexically bound, we mean it uses the this or variable from its lexical (outer) context.

ðŸ”§ Most common case: Arrow Functions

const obj = {
  value: 42,
  print: function () {
    const arrow = () => {
      console.log(this.value); // ðŸ‘ˆ lexically bound `this`
    };
    arrow();
  }
};

obj.print(); // ðŸ‘‰ 42

The arrow function does not have its own this.

It uses this from where it was defined (inside print()).

So this is lexically bound.


âœ… Summary

| Term                         | Meaning                                                             |
| ---------------------------- | ------------------------------------------------------------------- |
| **Lexical Scope**            | Variables are accessible based on where theyâ€™re **written** in code |
| **Lexically Bound (`this`)** | Arrow functions use `this` from their enclosing **lexical context** |


ðŸ”‘ Lexical scope refers to how variables are resolved.
ðŸ”‘ Lexical binding (esp. of this) refers to where a function gets its this from.
