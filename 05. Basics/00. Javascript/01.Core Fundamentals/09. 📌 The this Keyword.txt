
🔹 BASICS

1. What is this?
	this refers to the execution context, i.e., the object that is currently executing the code.

2. Global Context

	console.log(this); // In browsers: `window`

	In the global scope, this refers to the global object (window in browsers, global in Node.js).

3. Inside a Function

	function show() {
		console.log(this);
	}
	show(); // Global object (non-strict mode), `undefined` in strict mode

4. Object Method

	const person = {
	name: "Alice",
	greet() {
		console.log(this.name); // Refers to `person`
	}
	};
	person.greet(); // "Alice"

5. Arrow Function (lexical this)

const person = {
  name: "Alice",
  greet: () => {
    console.log(this.name); // ❌ Not "Alice", it's from outer (global) context
  }
};
person.greet(); // undefined

Arrow functions don't have their own this; they inherit from the lexical scope.


🔸 INTERMEDIATE

6. Constructor Function

function Car(make) {
  this.make = make;
}
const myCar = new Car("Toyota");
console.log(myCar.make); // "Toyota"


7. Manual Binding (call, apply, bind)

function greet() {
  console.log(`Hi, I'm ${this.name}`);
}
const user = { name: "Bob" };

greet.call(user);  // Hi, I'm Bob
greet.apply(user); // Hi, I'm Bob
const greetUser = greet.bind(user);
greetUser();       // Hi, I'm Bob



🔺 ADVANCED

9. Class Methods and this

class Animal {
  constructor(name) {
    this.name = name;
  }

  speak() {
    console.log(`${this.name} makes a sound.`);
  }
}
const dog = new Animal("Dog");
dog.speak(); // Dog makes a sound.


10. Losing this Context

const person = {
  name: "Eve",
  greet() {
    console.log(this.name);
  }
};

const greetFn = person.greet;
greetFn(); // undefined (or global)

✅ Fix: use .bind() or arrow function.

const greetFn = person.greet.bind(person);
const greetFn = () => person.greet();
person.greet(); // ✅ "Eve"



11. this in setTimeout / setInterval

function Timer() {
  this.seconds = 0;
  setInterval(() => {
    this.seconds++;
    console.log(this.seconds);
  }, 1000);
}
new Timer(); // ✅ arrow function preserves `this`


12. this in Prototypes

function Person(name) {
  this.name = name;
}
Person.prototype.sayHi = function () {
  console.log(`Hi, I'm ${this.name}`);
};

const p = new Person("Lara");
p.sayHi(); // Hi, I'm Lara


13. this in Closures

function outer() {
  const that = this;
  return function inner() {
    console.log(that); // ✅ workaround before arrow functions
  };
}


