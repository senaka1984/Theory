

üîπ 1. Execution Context

	An Execution Context (EC) is an environment in which JavaScript code is evaluated and executed.


	üí∞ Types of Execution Contexts:

| Type                 | Description                                                                                                        |
| -------------------- | ------------------------------------------------------------------------------------------------------------------ |
| **Global EC**        | Default context where code starts execution. Creates the global object (`window` in browser, `global` in Node.js). |
| **Function EC**      | Created whenever a function is invoked. Each function has its own EC.                                              |
| **Eval EC** *(rare)* | Created when code is run inside `eval()` (not recommended).                                                        |


	üí∞ Execution Context has:

		üñä Variable Environment (variables, function declarations)

		üñä Lexical Environment (scope chain)

		üñä this Binding

		üñä Reference to Outer Environment


	üß† Creation and Execution Phases:

       1. Creation Phase

			Creates the Variable Object (stores variables and functions)

			Establishes the scope chain

			Determines the value of this

			Hoists var (as undefined) and function declarations

		2. Execution Phase

			Executes the code line by line

			Assigns values to variables

			Runs functions
			
			
üîπ 2. Call Stack

	The Call Stack keeps track of function calls in a Last In, First Out (LIFO) manner.

        Example:
        
        function greet() {
          console.log("Hello");
        }
        
        function start() {
          greet();
        }
        
        start();


How the Call Stack Works:

start() is called ‚Üí pushed to stack

Inside start(), greet() is called ‚Üí pushed to stack

greet() finishes ‚Üí popped

start() finishes ‚Üí popped

Stack is empty ‚úÖ

Stack Trace (visually):



| greet      | ‚Üê Top of stack (currently running)
| start      |
| global     |


After execution:

(empty)



üîÅ Combined Flow

	Step 1: Global Execution Context is created and pushed to Call Stack
	Step 2: Code starts running
	Step 3: When a function is called ‚Üí New Function Execution Context is created and pushed to stack
	Step 4: When function returns ‚Üí its EC is popped off the stack
	
	
üß™ Example with Logs

	console.log("Start");

    function sayHi() {
      console.log("Hi");
    }
    
    function callMe() {
      sayHi();
    }
    
    callMe();
    
    console.log("End");


	Execution Flow:

			Global EC ‚Üí console.log("Start")
           ‚Üí callMe() ‚Üí sayHi() ‚Üí console.log("Hi")
           ‚Üí console.log("End")


	Call Stack at peak:

		| sayHi     |
		| callMe    |
		| global    |
 

‚úÖ Summary


	| Concept               | Description                                         |
| --------------------- | --------------------------------------------------- |
| **Execution Context** | Environment where JS code runs (global or function) |
| **Call Stack**        | Tracks function calls in LIFO order                 |
| **Creation Phase**    | Hoists vars/functions, sets up `this`               |
| **Execution Phase**   | Executes code line-by-line                          |
| **Lexical Scope**     | Determined at creation, not runtime                 |


	















