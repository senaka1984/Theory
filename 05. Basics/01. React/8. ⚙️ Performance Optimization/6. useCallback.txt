📌 💰 💵 💸 💳 📉 📈 💹 💲 🧾 📄 📝 🖊 🗂 🧠 ⚠ ❗ ✅ ❌ 📌 🔍 👨‍💼 👔 🧑 🧑 💼 📝🧳 🏡 🧠 🎯 🛑 ✅ 💡

how it works, when to use it, how it differs from other hooks, and real-world examples.

🔁 What is useCallback?

const memoizedCallback = useCallback(fn, deps);

useCallback returns a memoized version of the callback function fn that only changes if dependencies (deps) change.


⚙️ Why use useCallback?

	🔍 Every time a component re-renders, all functions inside it are re-created. This can cause:

	🔍 Unnecessary renders in child components (especially those wrapped in React.memo)

	🔍 Breaking referential equality checks in dependencies (e.g., in useEffect, useMemo)

	🔍 useCallback prevents this by preserving the same function reference.
	
	
🧪 Basic Example

const Parent = () => {
  const [count, setCount] = useState(0);

  const handleClick = useCallback(() => {
    console.log("Clicked!");
  }, []); // No dependencies, function stays the same

  return (
    <>
      <button onClick={() => setCount(c => c + 1)}>Increment</button>
      <Child onClick={handleClick} />
    </>
  );
};

const Child = React.memo(({ onClick }) => {
  console.log("Child rendered");
  return <button onClick={onClick}>Child Button</button>;
});


Without useCallback, handleClick would be recreated on every render → Child would re-render every time.