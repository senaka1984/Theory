
Cloud Computing

1. High Availability
•	Ensures that the system is operational and accessible for the maximum possible time, minimizing downtime.
•	Achieved through redundancy, load balancing, and failover mechanisms.
---
2. Fault Tolerance
•	The ability of a system to continue functioning even when one or more components fail.
•	Achieved through replication, self-healing, and distributed architectures.
---
3. Scalability
•	The ability to handle increasing or decreasing workloads by dynamically adding or removing resources.
•	Vertical Scaling: Adding more power (CPU, RAM) to an existing instance.
•	Horizontal Scaling: Adding more instances to distribute the load.

4. Elasticity
•	The ability to automatically scale resources up or down based on demand.
•	Ensures cost efficiency by allocating resources only when needed.
---
5. Resilience
•	The ability to recover quickly from failures or disruptions.
•	Includes disaster recovery mechanisms, backup strategies, and geographically distributed data centers.
---
6. Security
•	Protecting data, applications, and infrastructure from unauthorized access, breaches, and attacks.
•	Includes encryption, firewalls, identity and access management (IAM), and compliance with security standards.

7. Cost Efficiency
•	Pay-as-you-go pricing models ensure that users only pay for the resources they consume.
•	Optimized resource allocation to reduce waste and unnecessary expenses.
---
8. Performance
•	Ensuring low latency, high throughput, and optimal resource utilization.
•	Achieved through caching, content delivery networks (CDNs), and optimized infrastructure.
---
9. Global Reach
•	The ability to deploy applications and services across multiple geographic regions.
•	Ensures low latency for users worldwide and compliance with regional regulations.
---
10. Interoperability
•	The ability to integrate and work seamlessly with other systems, platforms, and services.
•	Achieved through APIs, standard protocols, and hybrid cloud solutions.

11. Automation
•	Automating repetitive tasks like provisioning, scaling, monitoring, and backups.
•	Achieved through tools like Infrastructure as Code (IaC) and orchestration platforms.
---
12. Observability
•	The ability to monitor, log, and trace system performance and behavior.
•	Includes metrics, alerts, and dashboards for proactive issue detection and resolution.
---
13. Multi-Tenancy
•	The ability to serve multiple customers (tenants) on the same infrastructure while isolating their data and workloads.
•	Ensures efficient resource utilization and cost-sharing.
---
14. Disaster Recovery
•	Strategies to recover data and services in case of catastrophic failures.
•	Includes backup and restore, failover to secondary regions, and business continuity planning.
---
15. Portability
•	The ability to move applications and data between different cloud providers or on-premises environments.
•	Achieved through containerization (e.g., Docker, Kubernetes) and standardization.

16. Self-Service
•	Users can provision and manage resources on-demand without manual intervention.
•	Achieved through user-friendly portals and APIs.
---
17. Compliance
•	Adherence to legal, regulatory, and industry standards (e.g., GDPR, HIPAA, ISO 27001).
•	Ensures data privacy, security, and governance.
---
18. Decoupling
•	Designing systems with loosely coupled components to reduce dependencies and improve flexibility.
•	Achieved through microservices, event-driven architectures, and message queues.

19. Latency Optimization
•	Reducing the time it takes for data to travel between users and cloud services.
•	Achieved through edge computing, CDNs, and regional data centers.
---
20. Energy Efficiency
•	Optimizing resource usage to reduce energy consumption and carbon footprint.
•	Achieved through efficient hardware, virtualization, and workload optimization.

