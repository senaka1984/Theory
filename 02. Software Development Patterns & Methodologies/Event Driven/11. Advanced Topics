
✅ 11. Advanced Topics

🔗🚀 Mixing EDA with Request/Response

	While Event-Driven Architecture (EDA) is typically asynchronous, it's possible to combine it with request/response patterns to leverage the benefits of both worlds. 
	The main idea is to blend asynchronous event-driven communication with synchronous request/response interactions to meet specific use cases where synchronous behavior is required.

	⏳🔄 How EDA and Request/Response can work together:
	
		🔄 Hybrid Approach: In many systems, some operations need to be handled synchronously (e.g., user authentication or fetching data), while others can be event-driven 
		(e.g., notifications, background processing). Combining the two models allows you to use the right approach for the right task.

		🔄 Request/Response for User-Facing Operations: For instance, when a user requests data (e.g., placing an order), the system might perform the action synchronously to 
		provide a response immediately. But, after the request is processed, it might trigger background events (e.g., inventory update, shipment processing) handled asynchronously.

	⏳🔄 Example:

		🔄 Order Placement:

		🔄 Request/Response: A user places an order (synchronously, they get an immediate response).

		🔄 Event-Driven Processing: After the order is placed, an event like "OrderPlaced" is emitted asynchronously to update inventory, charge the user, and schedule shipment.

🔗🚀 Synchronous EDA

	⏳🔄 Synchronous Event-Driven Architecture (EDA) is somewhat counterintuitive, as EDA is typically designed for asynchronous communication. However, there are scenarios where 
		synchronous event handling is required or desirable. In synchronous EDA, the producer emits an event and waits for the consumer’s response before proceeding.

	⏳🔄 How Synchronous EDA Works:
	
		The producer emits an event, but instead of proceeding without waiting, it waits for the consumer to finish processing the event and return a response.

		This could be useful in situations where the event triggers an action that requires an immediate result, such as validating a user's input or processing a payment.

	⏳🔄 Example:

		Payment Processing: The user triggers a payment event, and the system waits for the result (success or failure) before proceeding with the next steps, such as order 
		confirmation or sending a receipt.

	⏳🔄 Challenges of Synchronous EDA:
	
		Scalability: Blocking or waiting for responses can reduce the scalability of the system, especially in high-throughput environments.

		Latency: Synchronous processing can introduce latency, as the producer must wait for the consumer to complete processing before it can move forward.

		Fault Tolerance: If the consumer fails or is slow, the entire system may be impacted because of the synchronous waiting behavior.
		

🔗🚀 Events as Source of Truth

	⏳🔄 In some architectures, especially when implementing Event Sourcing, events become the source of truth. This means that the system's state is reconstructed by replaying a 
	series of events, rather than relying on a traditional database to store the current state.

		Key Characteristics:
			State Reconstruction: The system doesn’t store the current state directly. Instead, it stores a sequence of events (e.g., "OrderPlaced", "PaymentReceived"), 
			and the current state is reconstructed by replaying those events.

		Event Storage: The event store serves as the primary data source, making it easy to track the history of changes over time.

		Immutable Events: Events are immutable, meaning once they are logged, they cannot be changed, ensuring an auditable and accurate record of what happened.

	⏳🔄 Benefits:
		Auditability: Since every change is stored as an event, the entire system history can be tracked and audited.

		Traceability: You can easily trace the sequence of actions that led to the current state of the system.

		Error Recovery: The system can rebuild state by replaying events from the event store, making it easier to recover from errors or failures.

	⏳🔄 Example:
		Banking System: Instead of storing just the current balance of an account, every transaction (deposit, withdrawal) is stored as an event. By replaying the events, you can reconstruct the account’s balance at any point in time.



🔗🚀 The Saga Pattern

The Saga Pattern is a way of managing long-running distributed transactions in an event-driven system. It helps coordinate actions across multiple services, ensuring that the 
system can maintain consistency without relying on distributed transactions or traditional ACID transactions.

	⏳🔄 How the Saga Pattern Works:
		 A saga is a sequence of local transactions, each of which updates one service. If a transaction in the saga fails, compensating actions are triggered to roll back or undo 
		 previous transactions.

	⏳🔄 Two Types of Sagas:

		Choreography-based Sagas: Each service involved in the saga emits events and listens for events from other services. Each service decides what to do based on the 
		received event.

		Orchestration-based Sagas: A central orchestrator controls the flow of the saga, instructing each service on what actions to perform and waiting for responses.

	⏳🔄 Benefits:
		Fault Tolerance: If any step in the saga fails, compensating transactions (like refunds or cancelations) can be triggered to maintain consistency across the services.

		No Distributed Transactions: Sagas avoid the complexity of distributed transactions, which are hard to scale and maintain.

		Decentralization: Choreography-based sagas, in particular, avoid a single point of failure by allowing each service to independently manage its part of the saga.

	⏳🔄 Example:
		Order Processing:

			Step 1: A user places an order (Order service).

			Step 2: The Payment service processes payment.

			Step 3: The Inventory service reserves items.

			Step 4: The Shipment service prepares and ships the order.

	If payment fails after the order is placed, a compensating action would cancel the order or refund the payment, ensuring the system remains in a consistent state.



🔗🚀 Events on the Front End

	Events on the Front End refer to the handling and propagation of events on the client-side of an event-driven architecture. Front-end applications can also emit and consume 
	events in an event-driven system, enabling real-time interaction with users.

	⏳🔄 How Front-End Events Work:
	
		Client-Side Events: The front-end (client-side) might emit events in response to user interactions (e.g., button clicks, form submissions). These events are then sent to the 
		backend to trigger actions.

		Real-Time Updates: Events can be sent to the backend (via WebSockets, HTTP requests, or other protocols), and the backend processes them and sends back a response, often 
		leading to real-time updates on the client side (e.g., using technologies like WebSockets, Server-Sent Events, or GraphQL Subscriptions).

		Decoupling: The front end doesn’t have to be tightly coupled with the backend logic. It just emits events that are consumed by the backend, making the front end more flexible.

	⏳🔄 Benefits of Using Events on the Front End:
	
		Real-Time Interaction: Enables real-time, interactive user experiences, such as live updates (e.g., stock prices, messages).

		Loose Coupling: The front-end application is decoupled from backend services. It can send events to the backend without needing to know exactly what happens there.

		Scalability: Event-driven systems, including the front end, can scale more easily since the backend only reacts to events without maintaining direct connections with clients.

	⏳🔄 Example:
	
		Chat Application: A user sends a message (frontend event), which is consumed by the backend. The backend then processes the message and sends a "new message" event to all 
		connected clients, who display the message in real time.

🔗🚀 Summary

	Mixing EDA with Request/Response: You can combine EDA with request/response for systems that need immediate feedback (synchronous behavior) while still processing other tasks 
	asynchronously in the background.

	⏳🔄 Synchronous EDA: Event-driven systems can be designed to be synchronous when the producer waits for the consumer’s response before continuing, but this can introduce latency and scalability challenges.

	⏳🔄 Events as Source of Truth: In event sourcing, events represent the source of truth, and the system state is reconstructed by replaying those events.

	⏳🔄 Saga Pattern: The Saga pattern helps manage long-running transactions in distributed systems, ensuring consistency through a series of steps, with compensating actions if 
		any step fails.

Events on the Front End: Front-end applications can generate events that trigger backend processing and receive real-time updates from the backend, enabling dynamic and responsive user experiences.